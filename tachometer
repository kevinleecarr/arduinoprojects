#include "SevenSegmentTM1637.h"
#include "SevenSegmentExtended.h"

const int DATA_IN = 2; //IR sensor INPUT

unsigned long prevMicros; // To store time

unsigned long duration; // To store time difference
unsigned long refresh; // To store time for refresh of reading
boolean newRev = 0;

long rpm = 0L; // RPM value

char sRPM[5];
       
boolean currentState; // Current state of IR input scan
boolean prevState; // State of IR sensor in previous scan

/* initialize global TM1637 Display object
*  The constructor takes two arguments, the number of the clock pin and the digital output pin:
* SevenSegmentTM1637(byte pinCLK, byte pinDIO);
*/
//lcd
const byte PIN_CLK = 4;   // define CLK pin (any digital pin)
const byte PIN_DIO = 5;   // define DIO pin (any digital pin)
SevenSegmentExtended      display(PIN_CLK, PIN_DIO);

void setup()
{
  pinMode(DATA_IN,INPUT);       
  prevMicros = micros();
  prevState = digitalRead(DATA_IN);  
  Serial.begin(9600);
  display.begin();            // initializes the display
  display.setBacklight(100);  // set the brightness to 100 %
  
  refresh = millis();
}

void loop()
{
  // RPM Measurement
  currentState = digitalRead(DATA_IN);
  if (currentState == HIGH && prevState == HIGH && !newRev) {
    duration = ( micros() - prevMicros );
    if (duration > 0) { // Can be negative due to micros rollover every 70 minutes
       rpm = (60000000L/duration); // rpm = (1/ time millis)*1000*1000*60;
    }
    prevMicros = micros(); // store time for nect revolution calculation
    newRev = 1;
  }
  if (currentState == LOW && prevState == LOW) {
    newRev = 0;
  }
  prevState = currentState;
  
  // LCD Display
  if( ( millis()-refresh ) >= 100 ) {
       if (micros() - prevMicros > 1000000L) {
         rpm = 0;
         prevMicros = micros();
       }
       Serial.println(rpm);

       if (rpm > 9999) {
         rpm = 9999; 
       } else if (rpm < 0) {
         rpm = 0;
       }
       sprintf(sRPM, "%04d", (int)rpm);
       display.print(sRPM);

       refresh = millis();
  }
}
